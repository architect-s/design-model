结构型模式：主要总结了一些类或对象组合在一起的经典结构。
代理模式：
    在不改变原始类(代理类)的情况下，通过引入代理类来给原始类附加功能。一般，我们让代理类和原始类实现同样的接口。但是，如果原始类并没有定义接口，并且
原始类代码并不是我们开发维护的，我们可以通过让代理类继承原始类的方法实现代理模式。
    动态代理：静态代理需要针对每个类都创建一个代理类，并且每个代理类中的代码都有点像模板式的代码，增加维护和开发成本。
    对于静态代理存在的问题，可以通过动态代理来解决：我们不事先为每个原始类编写代理类，而是在运行的时候动态地创建原始类对应的代理类，然后在系统中用代理类替换掉原始类。
    应用场景:开发一些非功能性需求，如：监控、统计、鉴权、限流、事务、幂等、日志等。将这些附加功能与业务功能解耦，放到代理类统一处理，让程序员只需要关注业务方面的开发。
        代理模式还可以用在RPC、缓存等应用场景中。
桥接模式：
装饰着模式：
适配器模式：
门面模式：
组合模式：
享元模式：
